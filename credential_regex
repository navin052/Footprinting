# Python
import re
import os

# Multiline, case-insensitive pattern:
# - Captures a username/email, then (optionally across a newline) a password-like field
CRED_PATTERN = re.compile(
    r"""
    (?ix)                                   # i: ignore case, x: verbose
    \b(username|user|usr|login|email)\b
    \s*[:=\-]\s*
    (                                       
        "(?P<user_q1>[^"\r\n]+)"            # "quoted user"
        | '(?P<user_q2>[^'\r\n]+)'          # 'quoted user'
        | (?P<email>[A-Z0-9._%+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,24}) # email
        | (?P<user>[A-Z0-9._%+\-]{3,})      # plain user
    )
    [\s,;]*                                  # optional separators
    (?:[\r\n]+|.*?)                          # allow newline or same line noise
    \b(password|pass|pwd|secret)\b
    \s*[:=\-]\s*
    (
        "(?P<pw_q1>[^\s"\r\n]{4,})"
        | '(?P<pw_q2>[^\s'\r\n]{4,})'
        | (?P<pw>[^\s"'\r\n]{4,})
    )
    """,
    re.IGNORECASE | re.VERBOSE,
)

def _first(*vals):
    """Return the first non-empty value."""
    for v in vals:
        if v:
            return v
    return ""

def _mask_secret(s, keep=1):
    """Mask a secret, keeping first/last char for context."""
    if not s:
        return ""
    if len(s) <= 2:
        return "*" * len(s)
    return s[:keep] + "*" * (len(s) - 2*keep) + s[-keep:]

def scan_file(file_path):
    # Read as text; ignore undecodable bytes
    with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
        content = f.read()

    matches = []
    for m in CRED_PATTERN.finditer(content):
        user = _first(m.group("user_q1"), m.group("user_q2"), m.group("email"), m.group("user"))
        pw   = _first(m.group("pw_q1"), m.group("pw_q2"), m.group("pw"))
        # Compute 1-based line number for match start
        line_no = content.count("\n", 0, m.start()) + 1
        matches.append((line_no, user.strip(), pw.strip()))

    # Print results
    if not matches:
        print("No credential-like patterns found.")
    else:
        for line_no, user, pw in matches:
            print(f"Line {line_no}: user={user}, password={_mask_secret(pw)}")

if __name__ == "__main__":
    file_path = input("Enter the file path to scan: ").strip()
    if not os.path.isfile(file_path):
        print("Error: file not found.")
    else:
        scan_file(file_path)
